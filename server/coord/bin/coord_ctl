#!/bin/bash

RUNNER_SCRIPT_DIR=$(cd ${0%/*} && pwd)

RUNNER_BASE_DIR=${RUNNER_SCRIPT_DIR%/*}
RUNNER_ETC_DIR=$RUNNER_BASE_DIR/etc
RUNNER_BIN_DIR=$RUNNER_BASE_DIR/bin
RUNNER_LOG_DIR=$RUNNER_BASE_DIR/log

RUNNER_EBIN_DIR=$RUNNER_BASE_DIR/ebin
RUNNER_USER=

# Make sure CWD is set to runner base dir
cd $RUNNER_BASE_DIR

# Extract the target node name from node.args
NAME_ARG=`grep '\-[s]*name' $RUNNER_ETC_DIR/coord.args`
if [ -z "$NAME_ARG" ]; then
    echo "coord.args needs to have either -name or -sname parameter."
    exit 1
fi

# Learn how to specify node name for connection from remote nodes
echo "$NAME_ARG" | grep '^-sname' > /dev/null 2>&1
if [ "X$?" = "X0" ]; then
    NAME_PARAM="-sname"
    NAME_HOST=""
else
    NAME_PARAM="-name"
    echo "$NAME_ARG" | grep '@.*' > /dev/null 2>&1
    if [ "X$?" = "X0" ]; then
        NAME_HOST=`echo "${NAME_ARG}" | sed -e 's/.*\(@.*\)$/\1/'`
    else
        NAME_HOST=""
    fi
fi

# Extract the target cookie
COOKIE_ARG=`grep '\-setcookie' $RUNNER_ETC_DIR/coord.args`
if [ -z "$COOKIE_ARG" ]; then
    echo "coord.args needs to have a -setcookie parameter."
    exit 1
fi

# Identify the script name
SCRIPT=`basename $0`

# Parse out release and erts info
ERLANG_BASE_DIR=/usr/local/lib/erlang
START_ERL=`cat $ERLANG_BASE_DIR/releases/start_erl.data`
ERTS_VSN=${START_ERL% *}
APP_VSN=${START_ERL#* }

# Add ERTS bin dir to our path
ERTS_PATH=$ERLANG_BASE_DIR/erts-$ERTS_VSN/bin

# Setup command to control the node
NODETOOL="$ERTS_PATH/escript $RUNNER_BIN_DIR/nodetool $NAME_ARG $COOKIE_ARG"

# Check the first argument for instructions
case "$1" in
    status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT status"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl status $@
        ;;

    syncdb)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT syncdb"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl syncdb $@
        ;;

    run)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT run"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl run $@
        ;;

    cluster_info)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT cluster_info"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl cluster_info $@
        ;;

    shards)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT shards"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl shards $@
        ;;

    presences)
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT presences"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl presences $@
        ;;

    dispatches)
        if [ $# -lt 2 ]; then
            echo "Usage: $SCRIPT dispatches DN"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl dispatches $@
        ;;

    lookup)
        if [ $# -lt 2 ]; then
            echo "Usage: $SCRIPT lookup Dn"
            exit 1
        fi

        # Make sure the local node IS running
        RES=`$NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        shift

        $NODETOOL rpc coord_ctl lookup $@
        ;;

    *)
        echo "Usage: $SCRIPT status       #query coord status"
		echo "		 syncdb		#loading db and sync with nodes"
		echo "		 run     	#dispatch nodes to node"
		echo "		 shards		#query shards"
		echo "		 presences	#query presences"
		echo "		 dispatches <DN>#query dispatched tasks of this DN"
		echo "		 lookup <DN>	#query cached info of this DN"
		echo "		 cluster_info		#query cluster nodes"
        exit 1
        ;;
	
esac

